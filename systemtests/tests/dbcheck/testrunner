#!/bin/bash
set -e
set -u

#
# previous versions (<= 17.2.4) had a problem with bvfs after running dbcheck.
# Therefore this test checks
#   * check bvfs root directory
#   * run all dbcheck fixes
#   * check bvfs root directory again
#

TestName="$(basename "$(pwd)")"
export TestName

JobName=backup-bareos-fd
Client=bareos-fd
BackupJobIds="1,2"
BvfsPathId="b201"

#shellcheck source=../environment.in
. ./environment

#shellcheck source=../scripts/functions
. "${rscripts}"/functions
"${rscripts}"/cleanup
"${rscripts}"/setup

DBCHECK="${BAREOS_DBCHECK_BINARY} -c ${confdir}"

check_bvfs_root_path()
{
   LOG="${1}"

cat <<END_OF_DATA >${tmp}/bconcmds
@$out ${LOG} w
.bvfs_lsdir jobid=${BackupJobIds} path=
END_OF_DATA

   run_bconsole

   check_log ${LOG}
   # expect:
   # 10    0   0   A A A A A A A A A A A A A A .
   # 9   0   0   A A A A A A A A A A A A A A /
   # 8   0   0   A A A A A A A A A A A A A A @bpipe@/
   if ! grep -q "\W/$" ${LOG}; then
      set_error "root directory not found (using '.bvfs_lsdir path=')."
      exit 1
   fi

   if ! grep -q "\W@bpipe@/$" ${LOG}; then
      set_error "@bpipe@ plugin directory not found (using '.bvfs_lsdir path=')."
      exit 1
   fi
}



# Directory to backup.
# This directory will be created by setup_data "$@"().
BackupDirectory="${tmp}/data"
BackupFileExtra=${BackupDirectory}/extrafile.txt

# Use a tgz to setup data to be backed up.
# Data will be placed at "${tmp}/data/".
setup_data "$@"

# os=`uname -s`
# if [ "$os" = "FreeBSD" ]; then
#   SED=`which gsed`
#   if [ -z $SED ]; then
#     echo "gsed is required on FreeBSD for this test"
#     exit 1
#   fi
# else
#   SED=sed
# fi

SED=sed

start_test

echo "Test Content 1" > ${BackupFileExtra}

# ${tmp}/bconcmds lists the bconsole commands executed by "run_bareos"
cat <<END_OF_DATA >${tmp}/bconcmds
messages
@$out ${tmp}/log-backup1.out w
run job=$JobName fileset=bpipe-fileset storage=File1 yes
wait
messages
quit
END_OF_DATA

# Start the bareos daemons
# and run the bconsole commands from ${tmp}/bconcmds
# Further bconsole commands can be executed by "run_bconsole".
run_bareos
check_log ${tmp}/log-backup1.out


# modify file and rerun backup
echo "Test Content 2" >> ${BackupFileExtra}

cat <<END_OF_DATA >${tmp}/bconcmds
@$out ${tmp}/log-backup2.out w
run job=$JobName fileset=bpipe-fileset storage=File1 yes
wait
messages
quit
END_OF_DATA

run_bconsole
check_log ${tmp}/log-backup2.out

${DBCHECK} -vvv -b -f > ${tmp}/dbcheck-after-backups.log

cat <<END_OF_DATA >${tmp}/bconcmds
.bvfs_update
@$out ${tmp}/log-bvfs-jobids.out w
.bvfs_get_jobids jobid=2
END_OF_DATA

run_bconsole

LOG=${tmp}/log-bvfs-jobids.out
check_log ${LOG}
# expect: 1,2
if ! grep -q "^[0-9,]*2$" ${LOG}; then
    set_error "failed to find required job ids."
fi

check_bvfs_root_path ${tmp}/log-bvfs-get-root-path-1.out

${DBCHECK} -vvv -b -f > ${tmp}/dbcheck-after-bvfs-update.log

check_bvfs_root_path ${tmp}/log-bvfs-get-root-path-2.out

cat <<END_OF_DATA >${tmp}/bconcmds
@$out ${tmp}/log-bvfs-cache.out w
.sql query="SELECT count(*) FROM Job WHERE HasCache!=0;"
.sql query="SELECT count(*) FROM PathHierarchy;"
.sql query="SELECT count(*) FROM PathVisibility;"

@$out ${tmp}/log-bvfs-clear-cache.out w
.bvfs_clear_cache yes

@$out ${tmp}/log-bvfs-cleared-cache-hascache.out w
.sql query="SELECT count(*) FROM Job WHERE HasCache!=0;"
@$out ${tmp}/log-bvfs-cleared-cache-PathHierarchy.out w
.sql query="SELECT count(*) FROM PathHierarchy;"
@$out ${tmp}/log-bvfs-cleared-cache-PathVisibility.out w
.sql query="SELECT count(*) FROM PathVisibility;"

quit
END_OF_DATA

run_bconsole

${DBCHECK} -vvv -b -f > ${tmp}/dbcheck-after-bvfs-clear-cache.log

cat <<END_OF_DATA >${tmp}/bconcmds
.bvfs_update
END_OF_DATA

run_bconsole

check_bvfs_root_path ${tmp}/log-bvfs-get-root-path-3.out

# verify that all are terminated
check_for_zombie_jobs storage=File1 client=${Client}

LOG=${tmp}/log-bvfs-cleared-cache-hascache.out
check_log ${LOG}
# expect:
# .sql query="SELECT count(*) FROM Job WHERE HasCache!=0;"
# +----------+
# | count(*) |
# +----------+
# | 0        |
# +----------+
#
# Get the 5. line and remove all "|" and " "
COUNT=`sed -e '5!d' -e 's/|//g' -e 's/ //g' $LOG`
if [ "${COUNT}" -ne "0" ]; then
    set_error "after .bvfs_clear_cache HasCache should be 0, not ${COUNT}."
fi

LOG=${tmp}/log-bvfs-cleared-cache-PathHierarchy.out
check_log ${LOG}
COUNT=`sed -e '5!d' -e 's/|//g' -e 's/ //g' $LOG`
if [ "${COUNT}" -ne "0" ]; then
    set_error "after .bvfs_clear_cache PathHierarchy table should be empty (but has ${COUNT} entries)."
fi

LOG=${tmp}/log-bvfs-cleared-cache-PathVisibility.out
check_log ${LOG}
COUNT=`sed -e '5!d' -e 's/|//g' -e 's/ //g' $LOG`
if [ "${COUNT}" -ne "0" ]; then
    set_error "after .bvfs_clear_cache PathVisibility table should be empty (but has ${COUNT} entries)."
fi

# stop bareos
stop_bareos

# end tests and check for error codes
end_test
